{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>This is a project based in a repository in which the main goal is to provide a basic structure for a project. For this purpose, the project consists of implementing a pipeline that consolidates a group of excel files that are locate in a folder into a single file.</p> <p>You can check the main steps to build the basic structure in the Steps section.</p>"},{"location":"functions/","title":"Functions","text":"<p>Below are the main functions that are used to build the pipeline.</p>"},{"location":"functions/#extract","title":"Extract","text":"<p>Fun\u00e7\u00e3o para ler os arquivos de uma pasta data/input e retornar uma lista de dataframes.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Caminho da pasta.</p> required <p>Returns:</p> Type Description <code>List[DataFrame]</code> <p>List[pd.DataFrame]: Lista de dataframes.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>Se nao tem arquivos na pasta.</p> Source code in <code>src/ETL/extract.py</code> <pre><code>def extract_from_excel(path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    Fun\u00e7\u00e3o para ler os arquivos de uma pasta data/input e retornar uma lista de dataframes.\n\n    Args:\n        path (str): Caminho da pasta.\n\n    Returns:\n        List[pd.DataFrame]: Lista de dataframes.\n\n    Raises:\n        ValueError: Se nao tem arquivos na pasta.\n\n    \"\"\"\n    all_files = glob.glob(os.path.join(path, \"*.xlsx\"))\n    if not all_files:\n        raise ValueError(\"No Excel files found in the specified folder\")\n\n    data_frame_list = [pd.read_excel(file) for file in all_files]\n\n    return data_frame_list\n</code></pre>"},{"location":"functions/#transform","title":"Transform","text":"<p>Fun\u00e7\u00e3o para transformar uma lista de dataframes em um \u00fanico dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame_list</code> <code>List[DataFrame]</code> <p>lista de dataframes.</p> required <p>Returns:</p> Type Description <code>DataFrame</code> <p>pd.DataFrame: dataframe</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>if data_frame_list is empty.</p> Source code in <code>src/ETL/transform.py</code> <pre><code>def concat_data_frames(data_frame_list: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"\n    Fun\u00e7\u00e3o para transformar uma lista de dataframes em um \u00fanico dataframe.\n\n    Args:\n        data_frame_list (List[pd.DataFrame]): lista de dataframes.\n\n    Returns:\n        pd.DataFrame: dataframe\n\n    Raises:\n        ValueError: if data_frame_list is empty.\n\n    \"\"\"\n    if data_frame_list == []:\n        raise ValueError(\"No data to transform\")\n\n    return pd.concat(data_frame_list, ignore_index=True)\n</code></pre>"},{"location":"functions/#load","title":"Load","text":"<p>Recebe um dataframe e salva como excel.</p> <p>Parameters:</p> Name Type Description Default <code>dataframe</code> <code>DataFrame</code> <p>dataframe.</p> required <code>output_path</code> <code>str</code> <p>caminho onde o arquivo ser\u00e1 salvo.</p> required <code>filename</code> <code>str</code> <p>nome do arquivo.</p> required <p>Returns:     'Arquivo salvo com sucesso': mensagem de sucesso.</p> Source code in <code>src/ETL/load.py</code> <pre><code>def load_excel(dataframe: pd.DataFrame, output_path: str, filename: str) -&gt; str:\n    \"\"\"\n    Recebe um dataframe e salva como excel.\n\n    Args:\n        dataframe (pd.DataFrame): dataframe.\n        output_path (str): caminho onde o arquivo ser\u00e1 salvo.\n        filename (str): nome do arquivo.\n    Returns:\n        'Arquivo salvo com sucesso': mensagem de sucesso.\n\n    \"\"\"\n    if not os.path.exists(output_path):\n        os.makedirs(output_path)\n    dataframe.to_excel(f\"{output_path}/{filename}.xlsx\", index=False)\n    return \"Arquivo salvo com sucesso\"\n</code></pre>"},{"location":"steps/","title":"Steps","text":""},{"location":"steps/#step-1-select-your-python-version","title":"Step 1: Select your python version","text":"<p>If you use pyenv, you can add a new python version and select it using the following command:</p> <pre><code># List all available versions\npyenv install --list\n\n# Install python\npyenv install &lt;python-version&gt;\n\n# Select your python version\npyenv local &lt;your-python-version&gt;\n</code></pre> <p>After selecting your python version, a new file <code>.python-version</code> will be created in your repository.</p>"},{"location":"steps/#step-2-virtual-environment","title":"Step 2: Virtual environment","text":"<p>A good practice is to set a new environment for your project. You can use <code>venv</code>, <code>poetry</code>, among others. For this project, I will use <code>poetry</code> beacuse it offers not only the a separate environment, but also the ability to document all the packages from the environment and if anyone wants to reproduce your repository it could be done using a single command, <code>poetry install</code>.</p> <pre><code># Setting the environment\npoetry config virtualenvs.in-project true\npoetry init\n# You can define:\n# - package name \n# - version\n# - description\n# - author\n# - license\n# - compatible python versions\n# - main and development dependencies interactively \n</code></pre> <p>After the definitions a new file <code>pyproject.toml</code> is created with all the the configurations for your project and you can use <code>poetry shell</code> to use your brand new environment.</p>"},{"location":"steps/#step-3-create-the-folder-structure","title":"Step 3: Create the folder structure","text":"<p>Add a basic folder structure, you can add: - src: your code goes here - data: if you have any data, add it here - tests: for your tests - docs: for your documentation</p>"},{"location":"steps/#step-4-create-a-gitignore-file","title":"Step 4: Create a .gitignore file","text":"<p>You can use gitignore.io website and search for Python to get a template.</p>"},{"location":"steps/#step-5-format-your-code","title":"Step 5: Format your code","text":"<p>You can use some libraries or extensions to help you with that, like:     - black (also has a vscode extension)     - isort (also has a vscode extension)     - blue     - flake8     - ruff (also has a vscode extension), this one combines black and isort libraries     - pydocstyle (you can use autoDocstring to help you to create the docstring): check if you docstring is correct</p> <p>Add the following lines to your <code>pyproject.toml</code> file: <pre><code>[tool.isort]\nprofile = \"black\" # change this accordingly\nknown_third_party = []\n</code></pre></p>"},{"location":"steps/#black-commands","title":"black commands","text":"<pre><code># format the scripts for the whole project\nblack .\n# format one file\nblack {path}\n</code></pre>"},{"location":"steps/#isort-commands","title":"isort commands","text":"<pre><code># sort the libraries for the whole project\nisort .\n# sort one file\nisort {path}\n</code></pre>"},{"location":"steps/#blue-commands","title":"blue commands","text":"<pre><code># format the scripts for the whole project\nblue .\n# format one file\nblue {path}\n</code></pre>"},{"location":"steps/#pydocstyle-commands","title":"pydocstyle commands","text":"<pre><code># check the docstring format for the whole project\npydocstyle .\n# check the docstring format one file\npydocstyle {path}\n</code></pre>"},{"location":"steps/#step-6-automation-of-your-tasks","title":"Step 6: Automation of your tasks","text":"<p>Instead of running all the commands you need manually, you can create tasks using <code>taskipy</code> to run them for you.</p> <pre><code># Add this to your pyproject.toml file\n# if you are using blue format comment the isort configuration\n[tool.taskipy.tasks]\nformat = 'isort . &amp;&amp; black .'\n</code></pre> <pre><code># Install the library\npoetry add taskipy\n# Run the task\ntask format # format is name of the task\n</code></pre>"},{"location":"steps/#step-7-create-documentation","title":"Step 7: Create documentation","text":"<p>You can use mkdocs to create documentation and other services to help with documentation.</p> <pre><code>poetry add mkdocs mkdocstrings-python pygments mkdocs-material pymdown-extensions\n# Create the initial setup\nmkdocs new .\n</code></pre>"}]}